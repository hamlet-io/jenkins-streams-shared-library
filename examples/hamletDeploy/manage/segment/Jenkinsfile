#!groovy

// Segment Management Pipeline

@Library('hamlet-streams') _

pipeline {
    agent none

    options {
        durabilityHint('PERFORMANCE_OPTIMIZED')
        parallelsAlwaysFailFast()
        skipDefaultCheckout()
    }


    environment {
        PRODUCT_INFRASTRUCTURE_REFERENCE = 'master'
        PRODUCT_CONFIG_REFERENCE = 'master'
        MODE = 'update'

        PARTITION = "${env.JOB_NAME}".split('/').first()
        JOB_BASE = "/" + "${env.PARTITION}"
        BASE_PROPERTIES = "${env.PARTITION}".toLowerCase()
    }

    stages {

        stage('Get Input:') {
            steps {
                loadProperties("${env.BASE_PROPERTIES}", 'true')

                script {
                    if (env.SEGMENT_LIST) {
                        def segments = env.SEGMENT_LIST.split('[, ]+')
                        if (segments.size() > 1) {
                            def input = input(
                                message: 'Select Segment',
                                parameters: [
                                    extendedChoice(
                                        name: 'SEGMENT',
                                        description: 'Segment to manage',
                                        multiSelectDelimiter: ',',
                                        value: "${env.SEGMENT_LIST}",
                                        quoteValue: false,
                                        saveJSONParameterToFile: false,
                                        type: 'PT_SINGLE_SELECT',
                                        visibleItemCount: 10
                                    )
                                ]
                            )
                            env.SEGMENT = input
                        } else {
                            env.SEGMENT = segments[0]
                        }
                    } else {
                        env.SEGMENT = 'default'
                    }
                }

                // Determine the applicable environments/units
                loadProperties("${env.SEGMENT}", 'true')

                script {
                    def input = input(
                        message: 'Select Environment/Units',
                        parameters: [
                            choice(
                                name: 'DEPLOYMENT_MODE',
                                choices: ['update', 'stop', 'hibernate'],
                                description: '''Desired way in which deploy should occur.
                            "update" will attempt a hot cutover from the running deployment to the desired deployment.
                            "stop" will stop the running deployment but not start the desired deployment - mainly intended to facilitate database maintenance without the application'''
                            ),
                            extendedChoice(
                                name: 'ENVIRONMENT',
                                description: 'Environment to manage',
                                multiSelectDelimiter: ',',
                                value: "${env.ENVIRONMENT_LIST}",
                                quoteValue: false,
                                saveJSONParameterToFile: false,
                                type: 'PT_SINGLE_SELECT',
                                visibleItemCount: 10
                            ),
                            extendedChoice(
                                name: 'LEVELS_LIST',
                                defaultValue: '',
                                description: 'Template levels to process',
                                multiSelectDelimiter: ',',
                                quoteValue: false,
                                saveJSONParameterToFile: false,
                                type: 'PT_CHECKBOX',
                                value: 'segment,solution,application',
                                visibleItemCount: 5
                            ),
                            extendedChoice(
                                name: 'SEGMENT_UNITS_LIST',
                                defaultValue: '',
                                description: 'Segment level units to manage',
                                multiSelectDelimiter: ',',
                                value: "${env.SEGMENT_UNITS}",
                                quoteValue: false,
                                saveJSONParameterToFile: false,
                                type: 'PT_CHECKBOX',
                                visibleItemCount: 10
                            ),
                            extendedChoice(
                                name: 'SOLUTION_UNITS_LIST',
                                defaultValue: '',
                                description: 'Solution level units to manage',
                                multiSelectDelimiter: ',',
                                value: "${env.SOLUTION_UNITS}",
                                quoteValue: false,
                                saveJSONParameterToFile: false,
                                type: 'PT_CHECKBOX',
                                visibleItemCount: 10
                            ),
                            extendedChoice(
                                name: 'APPLICATION_UNITS_LIST',
                                defaultValue: '',
                                description: 'Application level units to manage',
                                multiSelectDelimiter: ',',
                                value: "${env.APPLICATION_UNITS}",
                                quoteValue: false,
                                saveJSONParameterToFile: false,
                                type: 'PT_CHECKBOX',
                                visibleItemCount: 10
                            ),
                            booleanParam(
                                name: 'TREAT_RUN_ID_DIFFERENCES_AS_SIGNIFICANT',
                                defaultValue: false
                            )
                        ]
                    )
                    input.each{ k, v -> env["${k}"] ="${v}" }
                    currentBuild.displayName = (env.SEGMENT == "default") ? "${env.ENVIRONMENT}" : "${env.ENVIRONMENT}-${env.SEGMENT}"
                    currentBuild.description = "Levels: ${env.LEVELS_LIST}, SegmentUnits: ${env.SEGMENT_UNITS_LIST}, SolutionUnits: ${env.SOLUTION_UNITS_LIST}, ApplicationUnits: ${env.APPLICATION_UNITS_LIST}"

                    // Determine notification channels for the selected environment
                    def teams_notifications = "TEAMS_" + env.ENVIRONMENT
                    def slack_notifications = "SLACK_" + env.ENVIRONMENT
                    env.channels = "${env[teams_notifications.toUpperCase()]}, ${env[slack_notifications.toUpperCase()]}"
                }

            }
        }

        stage('Manage:') {
            steps {
                triggerManage(
                    env.JOB_BASE,
                    env.DEPLOYMENT_MODE,
                    env.ENVIRONMENT,
                    env.SEGMENT,
                    env.LEVELS_LIST,
                    env.SEGMENT_UNITS_LIST,
                    env.SOLUTION_UNITS_LIST,
                    env.APPLICATION_UNITS_LIST,
                    env.TREAT_RUN_ID_DIFFERENCES_AS_SIGNIFICANT,
                    env.channels
                )
            }
        }
    }
}
