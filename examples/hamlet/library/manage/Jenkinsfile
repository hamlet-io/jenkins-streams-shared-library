#!groovy

// Generate job to manage a segment

@Library('hamlet-streams') _

pipeline {
    agent {
        label 'hamlet-latest'
    }

    options {
        durabilityHint('SURVIVABLE_NONATOMIC')
        parallelsAlwaysFailFast()
        skipDefaultCheckout()
    }

    parameters {
        string(
            name: 'DEPLOYMENT_MODE',
            defaultValue: 'update',
            description: 'Mode to apply to all units'
        )
        string(
            name: 'ENVIRONMENT',
            defaultValue: '',
            description: 'Environment to target'
        )
        string(
            name: 'SEGMENT',
            defaultValue: '',
            description: 'Segment to plan'
        )
        string(
            name: 'LEVELS_LIST',
            defaultValue: '',
            description: 'Deprecated parameter - not used'
        )
        string(
            name: 'SEGMENT_UNITS_LIST',
            defaultValue: '',
            description: 'Segment level units to manage'
        )
        string(
            name: 'SOLUTION_UNITS_LIST',
            defaultValue: '',
            description: 'Solution level units to manage'
        )
        string(
            name: 'APPLICATION_UNITS_LIST',
            defaultValue: '',
            description: 'Application level units to manage'
        )
        booleanParam(
            name: 'TREAT_RUN_ID_DIFFERENCES_AS_SIGNIFICANT',
            defaultValue: false
        )
        string(
            name: 'CHANNELS',
            defaultValue: '',
            description: 'The channels for messages'
        )
    }

    environment {
        DEPLOYMENT_MODE = "${params.DEPLOYMENT_MODE}"
        ENVIRONMENT = "${params.ENVIRONMENT}"
        SEGMENT = "${params.SEGMENT}"
        TREAT_RUN_ID_DIFFERENCES_AS_SIGNIFICANT = "${params.TREAT_RUN_ID_DIFFERENCES_AS_SIGNIFICANT}"

        SEGMENT_UNITS_REGEX="^(" + "${params.SEGMENT_UNITS_LIST.tokenize(', ').join('|')}" + ")\$"
        SOLUTION_UNITS_REGEX="^(" + "${params.SOLUTION_UNITS_LIST.tokenize(', ').join('|')}" + ")\$"
        APPLICATION_UNITS_REGEX="^(" + "${params.APPLICATION_UNITS_LIST.tokenize(', ').join('|')}" + ")\$"

        BASE_PROPERTIES = env.JOB_NAME.split('/').first().toLowerCase()
    }

    stages {
        stage('Setup:') {
            steps {
                script {
                    currentBuild.displayName =  "#${env.BUILD_NUMBER}-" + ((env.SEGMENT == "default") ? "${env.ENVIRONMENT}" : "${env.ENVIRONMENT}-${env.SEGMENT}")
                    currentBuild.description = "Mode: ${params.DEPLOYMENT_MODE}, SegmentUnits: ${params.SEGMENT_UNITS_LIST}, SolutionUnits: ${params.SOLUTION_UNITS_LIST}, ApplicationUnits: ${params.APPLICATION_UNITS_LIST}"
                    env.COMMIT_CONTEXT = "mode=${params.DEPLOYMENT_MODE},segmentUnits=${params.SEGMENT_UNITS_LIST.replace(',', ' ')},solutionUnits=${params.SOLUTION_UNITS_LIST.replace(',', ' ')},applicationUnits=${params.APPLICATION_UNITS_LIST}"
                }

                withFolderProperties{
                    script {
                        env.ACCOUNTS_CMDB_URL    = env.FOLDER_ACCOUNTS_CMDB_URL
                        env.ACCOUNTS_CMDB_BRANCH = env.FOLDER_ACCOUNTS_CMDB_BRANCH
                        env.PRODUCT_CMDB_URL     = env.FOLDER_PRODUCT_CMDB_URL
                        env.PRODUCT_CMDB_BRANCH  = env.FOLDER_PRODUCT_CMDB_BRANCH
                        env.GIT_CREDENTIALS_ID   = env.FOLDER_GIT_CREDENTIALS_ID
                    }
                }

                // Access the properties files
                loadPropertiesFiles()

                // Get deployment properties
                // TENANT and PRODUCT are expected to come from the properties
                loadProperties(env.BASE_PROPERTIES)

                // Permit segment overrides
                loadProperties(env.SEGMENT)

                // Determine the ACCOUNT
                setAccount(env.PRODUCT, env.ENVIRONMENT, env.SEGMENT)

                // Construct the CMDB
                loadCMDB(
                    env.PRODUCT_CMDB_URL,
                    env.PRODUCT_CMDB_BRANCH,
                    env.GIT_CREDENTIALS_ID,
                    env.ACCOUNTS_CMDB_URL,
                    env.ACCOUNTS_CMDB_BRANCH,
                    env.PRODUCT
                )

                // Cloud access
                setCloudProviderCredentials(env.CLOUD_CREDENTIALS_ID)

                // hamlet version
                setHamletEngine(env.HAMLET_ENGINE_VERSION, env.HAMLET_CLI_VERSION)

                // Git config
                setGitConfiguration(env.GIT_EMAIL_DEFAULT,env.GIT_USER_DEFAULT)

                // Ensure plugins are loaded
                withCredentials([gitUsernamePassword(credentialsId: env.GIT_CREDENTIALS_ID)]) {
                    sh '''#!/bin/bash
                        hamlet setup || return $?
                    '''
                }
            }
        }

        stage('Update:') {
            when {
                not {
                    equals expected: 'stop', actual: env.DEPLOYMENT_MODE
                }
            }

            stages {
                stage ('Segment') {
                    when {
                        expression { return params.SEGMENT_UNITS_LIST.tokenize(', ').size() != 0 }
                    }

                    steps {
                        sh '''#!/bin/bash
                            hamlet deploy run-deployments \
                                -m ${DEPLOYMENT_MODE} \
                                -l segment \
                                -u ${SEGMENT_UNITS_REGEX} \
                            || return $?
                        '''
                    }
                }

                stage ('Solution') {
                    when {
                        expression { return params.SOLUTION_UNITS_LIST.tokenize(', ').size() != 0 }
                    }

                    steps {
                        sh '''#!/bin/bash
                            hamlet deploy run-deployments \
                                -m ${DEPLOYMENT_MODE} \
                                -l solution \
                                -u ${SOLUTION_UNITS_REGEX} \
                            || return $?
                        '''
                    }
                }

                stage ('Application') {
                    when {
                        expression { return params.APPLICATION_UNITS_LIST.tokenize(', ').size() != 0 }
                    }

                    steps {
                        sh '''#!/bin/bash
                            hamlet deploy run-deployments \
                                -m ${DEPLOYMENT_MODE} \
                                -l application \
                                -u ${APPLICATION_UNITS_REGEX} \
                            || return $?
                        '''
                    }
                }
            }
        }

        stage('Delete:') {
            when {
                equals expected: 'stop', actual: env.DEPLOYMENT_MODE
            }

            stages {

                stage ('Application') {
                    when {
                        expression { return params.APPLICATION_UNITS_LIST.tokenize(', ').size() != 0 }
                    }

                    steps {
                        sh '''#!/bin/bash
                            hamlet deploy run-deployments \
                                -m ${DEPLOYMENT_MODE} \
                                -l application \
                                -u ${APPLICATION_UNITS_REGEX} \
                            || return $?
                        '''
                    }
                }

                stage ('Solution') {
                    when {
                        expression { return params.SOLUTION_UNITS_LIST.tokenize(', ').size() != 0 }
                    }

                    steps {
                        sh '''#!/bin/bash
                            hamlet deploy run-deployments \
                                -m ${DEPLOYMENT_MODE} \
                                -l solution \
                                -u ${SOLUTION_UNITS_REGEX} \
                            || return $?
                        '''
                    }
                }

                stage ('Segment') {
                    when {
                        expression { return params.SEGMENT_UNITS_LIST.tokenize(', ').size() != 0 }
                    }

                    steps {
                        sh '''#!/bin/bash
                            hamlet deploy run-deployments \
                                -m ${DEPLOYMENT_MODE} \
                                -l segment \
                                -u ${SEGMENT_UNITS_REGEX} \
                            || return $?
                        '''
                    }
                }
            }
        }

        stage('Commit:') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: env.GIT_CREDENTIALS_ID)]) {
                    sh '''#!/bin/bash
                        hamlet cmdb commit-changes --products \
                            --commit-type cd \
                            --commit-description "manage_${BUILD_NUMBER}" \
                            --commit-message "manage_${BUILD_NUMBER},environment=${ENVIRONMENT},segment=${SEGMENT},${COMMIT_CONTEXT}" \
                            --branch "${PRODUCT_CMDB_BRANCH}" \
                            --push \
                        || return $?
                    '''
                }
            }
        }
    }

    post {
        success {
            notifyManageSuccess(
                params.DEPLOYMENT_MODE,
                params.ENVIRONMENT,
                params.SEGMENT,
                params.LEVELS_LIST,
                params.SEGMENT_UNITS_LIST,
                params.SOLUTION_UNITS_LIST,
                params.APPLICATION_UNITS_LIST,
                params.CHANNELS
            )
        }

        failure {
            notifyManageFailure(
                params.DEPLOYMENT_MODE,
                params.ENVIRONMENT,
                params.SEGMENT,
                params.LEVELS_LIST,
                params.SEGMENT_UNITS_LIST,
                params.SOLUTION_UNITS_LIST,
                params.APPLICATION_UNITS_LIST,
                params.CHANNELS
            )
        }
    }
}
