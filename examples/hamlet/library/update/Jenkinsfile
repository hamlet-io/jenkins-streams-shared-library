#!groovy

// Generate job to update build references

@Library('hamlet-streams') _

pipeline {
    agent {
        label 'hamlet-latest'
    }

    options {
        durabilityHint('SURVIVABLE_NONATOMIC')
        parallelsAlwaysFailFast()
        skipDefaultCheckout()
    }

    parameters {
        string(
            name: 'ENVIRONMENT',
            defaultValue: '',
            description: 'Environment to target'
        )
        string(
            name: 'SEGMENT',
            defaultValue: '',
            description: 'Segment to update'
        )
        string(
            name: 'DEPLOYMENT_GROUP',
            defaultValue: '',
            description: 'The group to deploy'
        )
        string(
            name: 'CODE_UNITS',
            defaultValue: '',
            description: 'The code units to update'
        )
        string(
            name: 'GIT_COMMIT',
            defaultValue: '',
            description: 'The git commit to apply to the code units'
        )
        string(
            name: 'CODE_TAG',
            defaultValue: '',
            description: 'The tag to apply to the code units'
        )
        string(
            name: 'CHANNELS',
            defaultValue: '',
            description: 'The channels for messages'
        )
    }

    environment {
        ENVIRONMENT = "${params.ENVIRONMENT}"
        SEGMENT = "${params.SEGMENT}"
        CODE_UNITS_LIST= params.CODE_UNITS.tokenize(', ').join(' ')
        GIT_COMMIT = "${params.GIT_COMMIT}"
        CODE_TAG = "${params.CODE_TAG}"

        BASE_PROPERTIES = env.JOB_NAME.split('/').first().toLowerCase()
    }

    stages {
        stage('Setup:') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}-" + ((env.SEGMENT == "default") ? "${env.ENVIRONMENT}" : "${env.ENVIRONMENT}-${env.SEGMENT}")
                    currentBuild.description = "Group: ${params.DEPLOYMENT_GROUP}, Units: ${params.CODE_UNITS}, Commit: ${params.GIT_COMMIT}, Tag: ${params.CODE_TAG}"
                    env.COMMIT_CONTEXT = "group=${params.DEPLOYMENT_GROUP},units=${params.CODE_UNITS.replace(',', ' ')},commit=${params.GIT_COMMIT},tag=${params.CODE_TAG}"
                }

                withFolderProperties{
                    script {
                        env.ACCOUNTS_CMDB_URL    = env.FOLDER_ACCOUNTS_CMDB_URL
                        env.ACCOUNTS_CMDB_BRANCH = env.FOLDER_ACCOUNTS_CMDB_BRANCH
                        env.PRODUCT_CMDB_URL     = env.FOLDER_PRODUCT_CMDB_URL
                        env.PRODUCT_CMDB_BRANCH  = env.FOLDER_PRODUCT_CMDB_BRANCH
                        env.GIT_CREDENTIALS_ID   = env.FOLDER_GIT_CREDENTIALS_ID
                    }
                }

                // Access the properties files
                loadPropertiesFiles()

                // Get deployment properties
                // TENANT and PRODUCT are expected to come from the properties
                loadProperties(env.BASE_PROPERTIES)

                // Permit segment overrides
                loadProperties(env.SEGMENT)

                // Determine the ACCOUNT
                setAccount(env.PRODUCT, env.ENVIRONMENT, env.SEGMENT)

                // Construct the CMDB
                loadCMDB(
                    env.PRODUCT_CMDB_URL,
                    env.PRODUCT_CMDB_BRANCH,
                    env.GIT_CREDENTIALS_ID,
                    env.ACCOUNTS_CMDB_URL,
                    env.ACCOUNTS_CMDB_BRANCH,
                    env.PRODUCT
                )

                // Cloud access
                setCloudProviderCredentials(env.CLOUD_CREDENTIALS_ID)

                // hamlet version
                setHamletEngine(env.HAMLET_ENGINE_VERSION, env.HAMLET_CLI_VERSION)

                // Git config
                setGitConfiguration(env.GIT_EMAIL_DEFAULT,env.GIT_USER_DEFAULT)

                // Ensure plugins are loaded
                withCredentials([gitUsernamePassword(credentialsId: env.GIT_CREDENTIALS_ID)]) {
                    sh '''#!/bin/bash
                        hamlet setup || return $?
                    '''
                }
            }
        }

        stage('Update:') {
            steps {
                sh '''#!/bin/bash
                    for CODE_UNIT in ${CODE_UNITS_LIST}; do
                        hamlet release update-image-reference \
                            -u "${CODE_UNIT}" \
                            -r "${GIT_COMMIT}" \
                            ${CODE_TAG:+--code-tag ${CODE_TAG}} \
                        || return $?
                    done
                '''
            }
        }

        stage('Commit:') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: env.GIT_CREDENTIALS_ID)]) {
                    sh '''#!/bin/bash
                        hamlet cmdb commit-changes --products \
                            --commit-type cd \
                            --commit-description "update_${BUILD_NUMBER}" \
                            --commit-message "update_${BUILD_NUMBER},environment=${ENVIRONMENT},segment=${SEGMENT},${COMMIT_CONTEXT}" \
                            --branch "${PRODUCT_CMDB_BRANCH}" \
                            --push \
                        || return $?
                    '''
                }
            }
        }
    }

    post {
        success {
            notifyUpdateSuccess(
                params.ENVIRONMENT,
                params.SEGMENT,
                params.DEPLOYMENT_GROUP,
                params.CODE_UNITS,
                params.GIT_COMMIT,
                params.CODE_TAG,
                params.CHANNELS
            )
        }

        failure {
            notifyUpdateFailure(
                params.ENVIRONMENT,
                params.SEGMENT,
                params.DEPLOYMENT_GROUP,
                params.CODE_UNITS,
                params.GIT_COMMIT,
                params.CODE_TAG,
                params.CHANNELS
            )
        }
    }
}
